"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9561],{81541:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"hello-ethereum-wallets","metadata":{"permalink":"/docs/zh-CN/blog/hello-ethereum-wallets","source":"@site/../blog/2024-11-07.md","title":"Hello Ethereum Wallets!","description":"You can now login using MetaMask, WalletConnect and +400 Ethereum Wallets on Near!","date":"2024-11-07T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":2.235,"hasTruncateMarker":true,"authors":[{"name":"Guille","title":"Docs Maintainer","url":"https://github.com/gagdiez","socials":{"x":"https://x.com/guillewrotethis","github":"https://github.com/gagdiez"},"imageURL":"https://github.com/gagdiez.png","key":"gagdiez","page":null},{"name":"Slava Karkunov","title":"DevRel","socials":{"x":"https://x.com/apocnab","github":"https://github.com/karkunow","linkedin":"https://www.linkedin.com/in/karkunov/"},"imageURL":"https://www.datocms-assets.com/95026/1677167398-photo_2022-12-02-14-55-03.jpeg","key":"slava","page":null}],"frontMatter":{"title":"Hello Ethereum Wallets!","authors":["gagdiez","slava"],"slug":"hello-ethereum-wallets","tags":["updates"]},"unlisted":false,"nextItem":{"title":"New Tutorial - Master Applications on NEAR","permalink":"/docs/zh-CN/blog/2024-10-24-new-tutorial"}},"content":"*You can now login using MetaMask, WalletConnect and +400 Ethereum Wallets on Near!*\\n\\n<p><img src=\\"/docs/blog/web3wallets/cover.png\\" /></p>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Ethereum Wallets on NEAR\\n\\nWe are excited to announce that NEAR now supports Ethereum wallets! This means that you can now login to NEAR applications using MetaMask, WalletConnect, and over 400 other Ethereum wallets.\\n\\nIn this post, we will explain how Ethereum wallets work on NEAR, and where to find information on how to integrate them into your applications.\\n\\n## How it works\\n\\nThe idea of bringing Ethereum wallets to Near was born on the [NEP-518](https://github.com/near/NEPs/issues/518), and the [Aurora Labs team](https://aurora.dev) worked for over a year to make it a reality.\\n\\nSince Ethereum wallets create **ethereum transactions** and talk with **ethereum RPCs**, the Aurora team had to create three components:\\n\\n1. A Translator API, that translates Ethereum RPC calls into NEAR RPC calls\\n2. A \\"Wallet Contract\\" deployed on Near, that can process Ethereum transactions\\n\\n<img src=\\"/docs/blog/web3wallets/diagram.png\\" height=\\"600px\\" style={{width: \\"auto\\", display: \\"block\\", margin: \\"0 auto\\"}} />\\n\\n\\n### Login\\n\\nImagine your account on Metamask is `0xD79...314`, and you want to login on a Near application. \\n\\nThe first time you login, `ethereum-wallets.near` will create the Near account `0xD79...314` for you.\\n\\n<img src=\\"/docs/blog/web3wallets/login.png\\" style={{width: \\"auto\\", display: \\"block\\", margin: \\"0 auto\\"}} />\\n\\nYour new Near account already has a `Wallet Contract` deployed on it, which can **translate ethereum transactions** into **account actions**.\\n\\n:::tip\\nIn Near, smart contracts can do anything an account can do, including sending tokens and calling other contracts!\\n:::\\n\\n### Using your Account\\n\\nOnce you have logged in, you can start interacting with the application. If at some point the application needs to interact with the blockchain, Metamask will ask you to sign a transaction.\\n\\nUnder the hood, Metamask will create an Ethereum transaction and send it to the `Translator API`, deployed at `https://eth-rpc.mainnet.near.org`.\\n\\nThe `Translator API` will then translate the Ethereum transaction into a **function call** into the `Wallet Contract` deployed in your account. Particularly, it will call the `rlp_execute` function, passing the Ethereum transaction as an argument. \\n\\n<img src=\\"/docs/blog/web3wallets/function-call.png\\" style={{width: \\"auto\\", display: \\"block\\", margin: \\"0 auto\\"}} />\\n\\nThe `Wallet Contract` will then execute the function call, and the application will receive the result.\\n\\n:::tip\\n\\nCheck [this transaction](https://testnet.nearblocks.io/txns/GrVGFVFmGBcNP5xkoA21gEJ7d5bUGVxtmkfHAzyUW895#enhanced) in our explorer to see the full execution path\\n\\n:::\\n\\n## Updating your Application\\n\\nIn order to support Ethereum wallets, you only need to update your version of `wallet-selector`, and configure it to include the new `ethereum-wallets` module.\\n\\nDo not worry! it is very simple, check our [**tutorial**](/tools/ethereum-wallets) and working example [**hello world frontend**](https://github.com/near-examples/hello-near-examples/tree/main/frontend).\\n\\n---\\n\\n## Resources\\n\\n1. [**Integration Tutorial**](/tools/ethereum-wallets)\\n\\n2. [Hello World Example](https://github.com/near-examples/hello-near-examples/blob/main/frontend/)\\n\\n3. [Recording of the Ethereum Wallet Presentation](https://drive.google.com/file/d/1xGWN1yRLzFmRn1e29kbSiO2W1JsxuJH-/view?usp=sharing)\\n\\n4. [NEP-518](https://github.com/near/NEPs/issues/518), the proposal that started it all"},{"id":"2024-10-24-new-tutorial","metadata":{"permalink":"/docs/zh-CN/blog/2024-10-24-new-tutorial","source":"@site/../blog/2024-10-24.md","title":"New Tutorial - Master Applications on NEAR","description":"You might have noticed that a new tutorial has been added to the docs! This multi-part series is all about learning to build full applications on NEAR; you will see how to build an on-chain auction from start to finish, including the smart contract, deploying it on-chain, and creating a frontend to interact with it.","date":"2024-10-24T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"},{"inline":true,"label":"tutorial","permalink":"/docs/zh-CN/blog/tags/tutorial"},{"inline":true,"label":"getting-started","permalink":"/docs/zh-CN/blog/tags/getting-started"}],"readingTime":0.98,"hasTruncateMarker":true,"authors":[{"name":"Owen Hassall","title":"DevRel","url":"https://github.com/PiVortex","socials":{"x":"https://x.com/ThePiVortex","github":"https://github.com/PiVortex"},"imageURL":"https://github.com/PiVortex.png","key":"pivortex","page":null}],"frontMatter":{"title":"New Tutorial - Master Applications on NEAR","authors":["pivortex"],"slug":"2024-10-24-new-tutorial","tags":["updates","tutorial","getting-started"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Hello Ethereum Wallets!","permalink":"/docs/zh-CN/blog/hello-ethereum-wallets"},"nextItem":{"title":"Future of Pagoda Services","permalink":"/docs/zh-CN/blog/2024-08-13-pagoda-services"}},"content":"You might have noticed that a [new tutorial](https://docs.near.org/tutorials/auction/introduction) has been added to the docs! This multi-part series is all about learning to build full applications on NEAR; you will see how to build an on-chain auction from start to finish, including the smart contract, deploying it on-chain, and creating a frontend to interact with it.\\n\\n\x3c!-- truncate --\x3e\\n\\nAlong the way you will learn several key concepts and how to use many key primitives along the way: \\n- Creating a simple smart contract\\n- Writing tests for a contract\\n- Deploying a contract to `testnet`\\n- Locking a contract\\n- Creating a frontend to interact with the contract\\n- Using an indexing API to view historical bids\\n- Making cross-contract calls\\n- Using Non-Fungible Tokens\\n- Using Fungible Tokens\\n- Modifying a factory contract to deploy your own contracts\\n\\nThis tutorial is a great for beginners to follow all the way through, but each section can also be used as a reference guide for different concepts. If you have any feedback or any questions regarding the tutorial please feel free to reach out in the [Developer Telegram Channel](https://t.me/neardev). \\n\\n**Start the tutorial [here](https://docs.near.org/tutorials/auction/introduction)**\\n\\nLet\'s keep building! \ud83d\ude80"},{"id":"2024-08-13-pagoda-services","metadata":{"permalink":"/docs/zh-CN/blog/2024-08-13-pagoda-services","source":"@site/../blog/2024-08-13.md","title":"Future of Pagoda Services","description":"As the NEAR ecosystem continues to decentralize, Pagoda will cease operations within the next six months and decentralize its functions into NEAR ecosystem teams and committees.  This document describes the transition plan for each of the services, activities, and tools that Pagoda develops or operates.","date":"2024-08-13T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":2.765,"hasTruncateMarker":true,"authors":[{"name":"Eric Winer","title":"CTO & Managing Director, Pagoda","url":"https://github.com/ewiner","imageURL":"https://github.com/ewiner.png","key":"ewiner","page":null}],"frontMatter":{"title":"Future of Pagoda Services","authors":["ewiner"],"slug":"2024-08-13-pagoda-services","tags":["updates"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"New Tutorial - Master Applications on NEAR","permalink":"/docs/zh-CN/blog/2024-10-24-new-tutorial"},"nextItem":{"title":"An update on the near.org / RPC outage on July 11, 2024","permalink":"/docs/zh-CN/blog/2024-07-11-near-org-outage"}},"content":"As the NEAR ecosystem continues to decentralize, Pagoda will cease operations within the next six months and decentralize its functions into NEAR ecosystem teams and committees.  This document describes the transition plan for each of the services, activities, and tools that Pagoda develops or operates.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Critical NEAR Services\\n\\nThe critical services below will continue to be operated and maintained by Pagoda until they are smoothly transitioned to new operators in the NEAR ecosystem during the second half of 2024:\\n\\n-   [near.org RPC](https://docs.near.org/api/rpc/providers) ([Request for Proposals](https://dev.near.org/infrastructure-committee.near/widget/app?page=rfp&id=2))\\n-   [NEAR Lake](https://docs.near.org/concepts/advanced/near-lake-framework) ([Request for Proposals](https://dev.near.org/infrastructure-committee.near/widget/app?page=rfp&id=3))\\n-   [BigQuery Public Dataset](https://docs.near.org/build/data-infrastructure/big-query) ([Request for Proposals](https://dev.near.org/infrastructure-committee.near/widget/app?page=rfp&id=4))\\n-   [Node Snapshots](https://near-nodes.io/intro/node-data-snapshots) \\n-   [State Sync](https://near-nodes.io/rpc/state-sync)\\n-   Undocumented but critical services:\\n    -   KitWallet Indexer API ([Request for Proposals](https://dev.near.org/infrastructure-committee.near/widget/app?page=rfp&id=1))\\n    -   near-cli Testnet Faucet\\n\\nEach transition will be independently planned and communicated on its own timeline and this page will be updated accordingly.\\n\\nThe NEAR [Infrastructure Committee](https://dev.near.org/infrastructure-committee.near/widget/near-prpsls-bos.components.pages.app?page=about) will manage this transition process by soliciting proposals from the community for continued operation of these services, then will select, fund, and oversee the new operator.\\n\\n#### A Note About near.org RPC\\n\\nThe Infrastructure Committee feels that Pagoda\'s fully-subsidized near.org RPC service is getting in the way of decentralization efforts and is preventing high-quality commercial RPC offerings from gaining traction. If a NEAR core team continues to support a free-to-use near.org RPC service, it will be required to gradually lower its rate limits over the coming months to prevent abuse. More details on this plan will be communicated by the end of September 2024. In light of this proposed change, **high-traffic near.org RPC users should start making plans to switch to other RPC providers**.\\n\\n### Chain Abstraction Services\\n\\n[Chain Signatures](https://docs.near.org/concepts/abstraction/chain-signatures), Multichain Gas Relayer, and [FastAuth](https://docs.near.org/build/chain-abstraction/fastauth-sdk) will continue to be developed by Pagoda, then will be taken over by the new Chain Abstraction / Multichain spinout from Pagoda and Proximity. More information will be shared in September or October 2024.\\n\\n### Pagoda Operations & Ecosystem Services\\n\\nPagoda\u2019s ecosystem services will transition as follows:\\n\\n-   [Infrastructure Committee](https://dev.near.org/infrastructure-committee.near/widget/near-prpsls-bos.components.pages.app?page=about) administration, the recently rebooted Security Assessment Program, and management of the [near.org](http://near.org) website will move under the purview of NEAR Foundation.\\n-   [Bug bounty](https://hackenproof.com/company/near/programs) triage will be transitioned to the protocol team at NEAR One.\\n-   The [NEAR Helpdesk](https://help.near.org/) will be turned into self-service documentation.\\n-   Pagoda\'s informal technical / smart contract advisory services for other ecosystem companies will wind down over the next few months.\\n\\n### Open-Source Libraries\\n\\nThese open-source libraries and tools will be developed by Pagoda until they reach a logical completion or stopping point:\\n\\n-   [Pagoda Metatransaction Relayer](https://github.com/near/pagoda-relayer-rs)\\n-   [Chain Hosted UI](https://github.com/near/chain-hosted-ui)\\n-   [Modularization and Refactor](https://t.me/neardev/53280) of near-api-js\\n\\nOnce active development by Pagoda has ceased, it doesn\'t mean these tools have to languish. We encourage the NEAR community to continue this work. If you need funding to do so, you can submit proposals to [DevHub](https://dev.near.org/devhub.near/widget/app) or the [Infrastructure Committee](https://dev.near.org/infrastructure-committee.near/widget/near-prpsls-bos.components.pages.app?page=about).\\n\\n### Deprecated Services\\n\\nBetween now and February 2025, Pagoda\'s development work will slow down or stop on the following products and services:\\n\\n-   QueryAPI\\n-   [Enhanced API](https://docs.near.org/pagoda/rpc/api)\\n-   [Alerts & Triggers](https://docs.near.org/pagoda/alerts/intro)\\n\\nThese are open-source services and we encourage the community to continue with their development and operation. If we can\'t identify new operators quickly, we will encourage remaining users of these services to switch to alternative solutions, then communicate a timeline for these services to be turned off."},{"id":"2024-07-11-near-org-outage","metadata":{"permalink":"/docs/zh-CN/blog/2024-07-11-near-org-outage","source":"@site/../blog/2024-07-18.md","title":"An update on the near.org / RPC outage on July 11, 2024","description":"From Thursday, July 11 to Saturday, July 13, many visitors to near.org and its subdomains (like dev.near.org and docs.near.org) were unable to reach those websites. Also, NEAR applications that rely on RPC services hosted on near.org were affected. This was due to a security incident followed by an outage from one of our vendors, Squarespace. During this period, the NEAR protocol & blockchain was unaffected by this incident, as it does not rely on any centralized services.","date":"2024-07-18T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"},{"inline":true,"label":"postmortems","permalink":"/docs/zh-CN/blog/tags/postmortems"}],"readingTime":6.555,"hasTruncateMarker":true,"authors":[{"name":"Eric Winer","title":"CTO & Managing Director, Pagoda","url":"https://github.com/ewiner","imageURL":"https://github.com/ewiner.png","key":"ewiner","page":null}],"frontMatter":{"title":"An update on the near.org / RPC outage on July 11, 2024","authors":["ewiner"],"slug":"2024-07-11-near-org-outage","tags":["updates","postmortems"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Future of Pagoda Services","permalink":"/docs/zh-CN/blog/2024-08-13-pagoda-services"},"nextItem":{"title":"Pagoda Pauses the B.O.S. Web Engine R&D Project","permalink":"/docs/zh-CN/blog/bos-web-engine-sunset"}},"content":"From Thursday, July 11 to Saturday, July 13, many visitors to [near.org](https://near.org) and its subdomains (like [dev.near.org](https://dev.near.org) and [docs.near.org](https://docs.near.org/)) were unable to reach those websites. Also, NEAR applications that rely on [RPC services](https://docs.near.org/api/rpc/providers) hosted on near.org were affected. This was due to a security incident followed by an outage from one of our vendors, Squarespace. During this period, the NEAR protocol & blockchain was unaffected by this incident, as it does not rely on any centralized services.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Our Use of Squarespace DNS\\n\\nThe near.org domain is operated by [Pagoda](https://www.pagoda.co/), an engineering arm of the NEAR Foundation. An important part of operating a domain like near.org is choosing a DNS provider; to learn more about DNS and how it operates, please see [this introduction](https://www.cloudflare.com/learning/dns/what-is-dns/). For years, we happily used Google\u2019s domain name registration & DNS service to manage near.org, as part of our broad usage of Google Cloud services. In June 2023, Google announced it had [sold its Domains business to Squarespace](https://support.google.com/domains/answer/13689670?hl=en), and that our account would be transitioned to Squarespace \u201cin the next few months.\u201d We expected that the new service from Squarespace would closely match the feature set, reliability, and security we had enjoyed while using Google Domains, and if there were any problems then we could easily switch from Squarespace to another DNS provider after the transition.\\n\\nOur first domain, near.wiki, was automatically moved over to Squarespace in May 2024. As we explored the new offering, our Security & IT teams quickly had concerns about the feature set, security controls, and level of enterprise support we could get from Squarespace. After some meetings with Squarespace sales and support failed to assuage our concerns, we decided to explore other DNS providers and to start migrating our domains off of Squarespace, starting with the \u2018simpler\u2019 ones and ending with near.org, our most complex and important domain name. As of last week, when this incident began, we had not yet begun migrating near.org to our new provider, Amazon Web Services, so it was still using Squarespace as its DNS provider.\\n\\n\\n### The Squarespace Security Incident\\n\\nUnbeknownst to us, Squarespace had a major security vulnerability. You can read about the problem in [this in-depth blog post from Security Alliance](https://securityalliance.notion.site/A-Squarespace-Retrospective-or-How-to-Coordinate-an-Industry-Wide-Incident-Response-fead693b66c14543a48283d85aec19ad). In short, when each domain was migrated from Google to Squarespace, all existing users on the Google Domains account were sent an email inviting them to create a new Squarespace account. But not everybody clicked on that email right away \u2013 some people, e.g. managers or our accounting team, only needed to log into the DNS service rarely or in emergencies. From what we can tell, all the attacker needed to do was identify one of those email addresses and sign up for a new Squarespace account using that email address, and they would be instantly granted full access to change or delete DNS entries for near.org. From our investigation, Squarespace did not require the attacker to verify ownership of the email address before letting them have full control on our account. In fact, we see no evidence that Squarespace even sent a \u201cwelcome\u201d email to that address upon account creation, which might have raised warning flags.\\n\\nOn July 11, an attacker gained access to our Squarespace account. They deleted the DNS entries for near.org and its subdomains, causing the outage described above. But unlike some other domains affected by this attack, the impact on near.org seems limited to an outage; we have seen no evidence that the attacker put in place an \u2018imposter\u2019 site to try and phish or scam users.\\n\\nThrough a combination of our actions and Squarespace\u2019s actions behind the scenes, we were able to quickly regain control of the account. However, due to other issues with Squarespace, it took another two days for near.org and its subdomains and services to get fully back online.\\n\\n\\n### The Squarespace Outage\\n\\nEven with full and exclusive access to our Squarespace, we were unable to restore service on near.org. The attacker had deleted our DNS entries, and when we re-added them, Squarespace failed to propagate those new entries to other DNS providers around the world. We attempted to quickly execute a switch to Amazon Web Service\u2019s DNS provider, but the feature to switch to a different DNS service was also broken on the Squarespace site.\\n\\nThe next morning, on Friday July 12, on a hunch we deleted and re-added all of our DNS entries once again. This time, it did take effect and DNS providers around the world quickly saw the new information. That resolved the outage for many users, but not for everyone. near.org had been set up with an additional security feature, DNSSEC, in which Squarespace was supposed to digitally sign our DNS entries to prove that the entries had not been forged by another DNS provider. But Squarespace wasn\u2019t properly updating and signing new DNSSEC entries, so any other DNS provider that validates DNSSEC was detecting near.org\u2019s DNS entries as a forgery and refusing to allow access to near.org. This affected [approximately 34% of users](https://stats.labs.apnic.net/dnssec), especially in Europe. There is a button on the Squarespace site to turn off DNSSEC, but unsurprisingly, that button also just showed an error message.\\n\\nFinally, on Saturday July 13, we were able to make contact with a specialist on the Squarespace team, and later that day they were able to fix the DNSSEC issue. Once that change propagated to other DNS providers around the world over the next few hours, near.org and the RPC service was restored for everyone.\\n\\n\\n### Reflections on this Incident\\n\\nYou may have noticed that we made a few assumptions in this blog post, saying \u201cfrom what we can tell\u201d and \u201cwe see no evidence of\u2026\u201d a few times. Ideally, almost a week after the incident began, we would have more hard truths and solid information about what happened.\\n\\nUnfortunately, we\u2019ve seen little to no communication from Squarespace throughout this period. We tried multiple support tickets, chat, personal contacts, LinkedIn messages, and going through our Google support team, and still didn\u2019t hear anything back from Squarespace until late on Friday July 12, about 36 hours after the incident began. Other affected companies also reported total silence from the Squarespace team. As far as we know, Squarespace has still not acknowledged this incident publicly, let alone shared details of the issue and how they remediated it, and their [status page](https://status.squarespace.com/) showed no outages or issues during this time.\\n\\nI personally find this lack of support, communication, and forthrightness to be unacceptable for any service provider. I\u2019m also somewhat disappointed in Google for transitioning a security-critical service to a new provider without proper vetting. We are accelerating our plans to move near.org and other domains out of Squarespace to Amazon Web Services\u2019s domain registrar and DNS provider, which has a great track record of reliability and security.\\n\\nDNS is a core part of internet infrastructure, but it\u2019s far from a perfect system. Every domain name owner must rely on one centralized DNS provider to maintain their DNS entries, and every user and application must rely on one or more centralized DNS providers to look up entries as they navigate the internet. Various projects in the blockchain industry have created non-custodial on-chain alternatives to DNS, such as [Unstoppable Domains](https://unstoppabledomains.com/) and [3DNS](https://3dns.box/) (FYI: neither have sponsored or were made aware of this post), but the existing DNS system is so entrenched that adoption has been a challenge. Hopefully as an industry we can make headway on a more decentralized, trustless open web before further incidents like this happen.\\n\\nI\u2019m deeply sorry to anyone affected by this outage, especially people exploring NEAR for the first time during the EthCC conference and EthGlobal hackathon. We will be more vigilant about using high-quality vendor services going forward \u2013 and, where possible, moving to decentralized on-chain solutions.\\n\\n-Eric Winer<br />\\nCTO & Managing Director, Pagoda"},{"id":"bos-web-engine-sunset","metadata":{"permalink":"/docs/zh-CN/blog/bos-web-engine-sunset","source":"@site/../blog/2024-07-01.md","title":"Pagoda Pauses the B.O.S. Web Engine R&D Project","description":"After careful consideration, Pagoda has decided to discontinue its active efforts to improve the B.O.S. Web Engine","date":"2024-07-01T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"},{"inline":true,"label":"BWE","permalink":"/docs/zh-CN/blog/tags/bwe"},{"inline":true,"label":"VM2","permalink":"/docs/zh-CN/blog/tags/vm-2"},{"inline":true,"label":"BOS","permalink":"/docs/zh-CN/blog/tags/bos"}],"readingTime":6.085,"hasTruncateMarker":true,"authors":[{"name":"Josh Ford","title":"DevX PM","url":"https://github.com/thisisjoshford","imageURL":"https://github.com/thisisjoshford.png","key":"thisisjoshford","page":null}],"frontMatter":{"title":"Pagoda Pauses the B.O.S. Web Engine R&D Project","authors":["thisisjoshford"],"slug":"bos-web-engine-sunset","tags":["updates","BWE","VM2","BOS"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"An update on the near.org / RPC outage on July 11, 2024","permalink":"/docs/zh-CN/blog/2024-07-11-near-org-outage"},"nextItem":{"title":"One place for all Smart Contracts Docs","permalink":"/docs/zh-CN/blog/sdks-unified"}},"content":"*After careful consideration, Pagoda has decided to discontinue its active efforts to improve the B.O.S. Web Engine*\\n\\n<p><img src=\\"/assets/images/protocol-b73c2a3ace3307226ee7eb2149ee432f.png\\" /></p>\\n\\n\x3c!-- truncate --\x3e\\n\\nAfter many discussions with NEAR\u2019s B.O.S. component developers and careful consideration, Pagoda has decided to discontinue its active development for [B.O.S. Web Engine R&D ](https://github.com/near/bos-web-engine)for an improved execution layer for NEAR B.O.S. Components. (also known as \u201cBWE\u201d & \u201cVM2\u201d)\\n\\n## Background\\n\\nLast year, [NEAR introduced the Blockchain Operating System](https://near.org/blog/near-announces-the-blockchain-operating-system), demonstrating how NEAR\u2019s performant tech stack could support a full-stack decentralized development platform that was multi-chain compatible. A core feature of this system consisted of composable decentralized front-ends (B.O.S. Components) paired with a user-centric data storage contract (social-db). This model, [pioneered by NEAR Social](https://thewiki.near.page/PastPresentAndFutureOfNearSocial), aimed to continue NEAR\u2019s mission of empowering users to own their data as well as eliminate reliance on centralized, single-entity-controlled web applications. The potential of a fully decentralized web and the creation of real dApps became closer to reality with these inherently open and customizable experiences.\\n\\nAs the community started to adopt B.O.S. it soon became clear that, while devs loved how fast it was to go from an idea to a product, its intrinsic technical limitations made it hard to use B.O.S. for any real-world application. This consistent feedback from multiple members of the community prompted Pagoda to start an R&D effort to improve B.O.S. such that:\\n\\n- It was as close to vanilla React as possible\\n- Supported npm package imports\\n- Unlocked multi-chain scalability limitations\\n- Improved performance\\n- Improved security\\n\\n## B.O.S. Web Engine\\n\\nIn order to act on this feedback and accomplish these goals, improvements had to be made to the execution layer that makes this all possible. At its core, a virtual machine, ([NEAR Social VM](https://github.com/NearSocial/VM)) renders front-end code that developers store in a smart contract onchain (social-db). It was determined that a new approach to the original VM solution was needed, and the B.O.S. Web Engine project was created. Countless hours of hard work and dedication have gone into this project, yielding many significant achievements along the way. However, one major challenge still stands in the way of a production-ready beta release: expanding support for npm packages, particularly UI libraries.\\n\\nDuring the alpha testing phase of this project, we anticipated a fairly straightforward path in resolving wider npm support but unfortunately, the team discovered a more complex scenario. While standard JavaScript packages work well, React UI libraries frequently encounter difficulties. These challenges stem from the unique packaging methods of each library and the complexities involved in synchronizing changes between the iframe and the outer DOM. Although we have identified several theoretical solutions, each requires further research and development to assess their practicality and effectiveness. This has been more fully detailed in [a GitHub discussion within the BWE Repo](https://github.com/near/react-on-chain/discussions/425).\\n\\nWe reached out to leading B.O.S. component contributors to determine whether this limitation would be unnegotiable and to learn what features they value most. Do they prioritize unrestricted NPM support over secure iframe composability? How important is composability, and how would they define it? (considering our approach dissects it down to the atomic level of every element)\\n\\nThis revealed some interesting findings, one of which was that secure composability on an atomic level was not at the top of the list. Most favored the ease of quick prototyping, deployment, and onboarding with managed infra and wallet connections. Many valued social-db features and the ability to create custom gateways (websites) using code and user data publicly available to them.\\n\\nIn short, there were three camps:\\n\\n### True Believers\\n\\n- Decentralize all the things!\\n- Love bleeding-edge unique tech\\n- Love inherent open-source\\n- Love social-db and its features\\n\\n### Quick Builders\\n\\n- Love the speed of development, prototyping, remixing\\n- Love reverse engineering existing components\\n- Quick onboarding with managed infra and wallet connections\\n- Great for hackathons\\n\\n### Detractors\\n\\n- Don\'t like anything about B.O.S. components\\n- DevX is poor and UI is slow\\n- Value convenience over decentralization\\n\\nAfter reviewing our findings and engaging extensively with developers using this platform, it became clear that continuing with the release of the B.O.S. web engine as currently planned could potentially have a net negative impact. The majority of developers indicated that they do not favor a version of the BWE with limited npm support, even if it means enhanced secure composability. Additionally, while a minority of builders prioritize decentralization over performance and convenience, those who truly value decentralized frontends might find simpler ways to achieve their objectives once the need for secure composability is eliminated.\\n\\nFor those who may disagree with this perspective, the B.O.S. Web Engine remains, and will always be an open-source project. Anyone who sees value in the work we have done and wishes to advance this initiative is welcome to carry this torch and continue the development. https://github.com/near/bos-web-engine\\n\\n## What does this mean for B.O.S. components & the current VM?\\n\\nDuring the development of the B.O.S. Web Engine, a large focus was placed on addressing the security aspects of the existing VM and B.O.S. component architecture. The primary concern is with the composability and attack vectors that are exposed when importing components authored by third parties. Despite numerous patches to address discovered exploits, the inherent complexities of JavaScript and the current VM\u2019s architecture suggest that such vulnerabilities may continue to persist. Pagoda has diligently monitored and addressed these issues to date but we anticipate challenges in continuing to proactively discover and mitigate future vulnerabilities.\\n\\n_For examples of previously discovered vulnerabilities, view the [VM changelog](https://github.com/NearSocial/VM/releases) going back to `v2.5.1`, paying attention to lines tagged as `FIX` on issues Reported by `BrunoModificato` from OtterSec._\\n\\nIf you find value in creating B.O.S. components and leveraging the features of the social-db smart contract, rest assured that this framework will remain open-source and permanently accessible on-chain. However, we urge caution when incorporating and using third-party components. Due to the current virtual machine\'s limitations, we cannot guarantee protection against potential future exploits.\\n\\n## Should I migrate my project off of B.O.S.?\\n\\nIf your application relies on community-contributed or unreviewed third-party components, then **yes**. As described above, we cannot guarantee protection against future security vulnerabilities in the VM and B.O.S. component architecture. However, you can mitigate (but not eliminate) these security risks by reviewing all third-party components and either forking them or locking down dependencies to the specific version that you reviewed.\\n\\nIf you are not relying on any untrusted component code, then **maybe**. You are not being forced to migrate and there are still teams actively building new applications leveraging B.O.S. Additionally, there are no plans to deprecate main B.O.S. gateways at [dev.near.org](https://dev.near.org), [near.social](https://near.social), [dapdap](https://dapdap.net) or [bos.gg](https://bos.gg). However, the underlying framework and virtual machine are no longer actively developed or maintained by the original team. Consequently, the pace at which new features are introduced and existing bugs or vulnerabilities are addressed may be slower than expected. We openly welcome new maintainers for [this codebase](https://github.com/nearsocial). However, as previously mentioned, we anticipate that additional security vulnerabilities may still be discovered.\\n\\nWe have updated [\u201cFrontends for Web3 dApps\u201d in docs.near.org](https://docs.near.org/build/web3-apps/frontend)  to help you choose a solution that is right for you. If you need help, please reach out to one of our support channels on [Telegram](https://t.me/neardev) or [Discord](https://near.chat) and we will be happy to assist you or answer any questions you have."},{"id":"sdks-unified","metadata":{"permalink":"/docs/zh-CN/blog/sdks-unified","source":"@site/../blog/2024-06-28.md","title":"One place for all Smart Contracts Docs","description":"We have consolidated all our documentation in a single section, so you don\'t need to go searching around for it","date":"2024-06-28T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":2.695,"hasTruncateMarker":true,"authors":[{"name":"Guille","title":"Docs Maintainer","url":"https://github.com/gagdiez","socials":{"x":"https://x.com/guillewrotethis","github":"https://github.com/gagdiez"},"imageURL":"https://github.com/gagdiez.png","key":"gagdiez","page":null}],"frontMatter":{"title":"One place for all Smart Contracts Docs","authors":["gagdiez"],"slug":"sdks-unified","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Pagoda Pauses the B.O.S. Web Engine R&D Project","permalink":"/docs/zh-CN/blog/bos-web-engine-sunset"},"nextItem":{"title":"Getting Started on NEAR Using Windows","permalink":"/docs/zh-CN/blog/getting-started-on-windows"}},"content":"*We have consolidated all our documentation in a single section, so you don\'t need to go searching around for it*\\n\\n<p><img src=\\"/assets/images/contracts-landing-5a9c76a78e71b0e5f9a96033f1f23d23.png\\" /></p>\\n\\n\x3c!-- truncate --\x3e\\n\\nSmart contracts are small pieces of logic that can live on every NEAR account. To build a contract you use the NEAR SDKs, which comes in two flavours: Rust and JavaScript.\\n\\nUntil today, we had multiple docs explaining how to build smart contracts:\\n- `/sdk/rust` dedicated to explain how to use the Rust SDK\\n- `/sdk/js` dedicated to explain how to use the JS SDK\\n- [`/build/smart-contracts/what-is`](/build/smart-contracts/what-is) - that explains general concepts, and how to implement them using both SDKs\\n\\nToday, this is over, as all the information on how to build smart contracts is located in a single area: [`/build/smart-contracts/what-is`](/build/smart-contracts/what-is).\\n\\nMeanwhile, we have transformed the [SDK page](/tools/sdk) to be a simple landing page with links to:\\n- The [Rust SDK reference docs](https://docs.rs/near-sdk/latest/near_sdk/)\\n- The [JS SDK reference docs](https://near.github.io/near-api-js/)\\n- The [Smart Contract Section](/build/smart-contracts/what-is)\\n\\n## Why did we have 3 sections explaining the same topic?\\n\\nThe reason we had 3 different sections was that, historically, the engineers of each SDK were working on their own docs in isolation. To help mitigate this, we created a section on NEAR docs, meant to consolidate all the external documentation.\\n\\nOne day, the individual SDK pages were deleted - if I remember correctly, it was because we wanted to have fewer domains - and we had to migrate everything in a rush.\\n\\nThis left us in a very weird situation: we already had a section explaining how to build a smart contract... and now we had 3.\\n\\n## A single source of truth\\n\\nLuckily, this is now fixed! We have finally conquered the original dream of having a single section for [Smart Contracts](/build/smart-contracts/what-is), with all the information consolidated in there. \\n\\nNow, we can focus on maintaining a single section, thus making it easier to keep it updated and relevant.\\n\\n## What\'s next?\\n\\nWe are currently undergoing a process of **consolidating** all the documentation. This means that we are looking at all the sections that have overlapping information, and trying to merge them into a single place.\\n\\nThis will not only improve the quality of our docs, but also make it easier for you to find the information you need. In fact, improving search is one of the main motors of this change, since we noticed that our search tool ([Algolia](https://www.algolia.com/)) gets confused when the same concept is spread all over the place.\\n\\nMoreover, having consistent and coherent documentation will allow us to further expand our search capabilities using AI! This is something we are very excited about, as it will allow us to provide you with even more relevant information.\\n\\n## If you don\'t like this change, please let us know!\\n\\nAs always, we are more than open to feedback. If you think that this change is not good, or that we are missing something, please let us know! You can reach out to us through the blue feedback button you see at the side of the screen.\\n\\nWe are looking forward to hearing your thoughts and feedback, and hope you enjoy the content we\'ll be sharing.\\n\\nHappy coding, and see you in the next post! \ud83d\ude80"},{"id":"getting-started-on-windows","metadata":{"permalink":"/docs/zh-CN/blog/getting-started-on-windows","source":"@site/../blog/2024-06-05.md","title":"Getting Started on NEAR Using Windows","description":"In this article, we will cover how to install WSL and setup a NEAR development environment on Windows.","date":"2024-06-05T00:00:00.000Z","tags":[{"inline":true,"label":"windows","permalink":"/docs/zh-CN/blog/tags/windows"},{"inline":true,"label":"tutorial","permalink":"/docs/zh-CN/blog/tags/tutorial"},{"inline":true,"label":"getting-started","permalink":"/docs/zh-CN/blog/tags/getting-started"}],"readingTime":3.04,"hasTruncateMarker":true,"authors":[{"name":"Lyudmil","title":"DevRel","url":"https://github.com/flmel","imageURL":"https://github.com/flmel.png","key":"flmel","page":null}],"frontMatter":{"title":"Getting Started on NEAR Using Windows","authors":["flmel"],"slug":"getting-started-on-windows","tags":["windows","tutorial","getting-started"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"One place for all Smart Contracts Docs","permalink":"/docs/zh-CN/blog/sdks-unified"},"nextItem":{"title":"It\'s gonna be Legen... wait for it...","permalink":"/docs/zh-CN/blog/yield-resume"}},"content":"In this article, we will cover how to install WSL and setup a NEAR development environment on Windows.\\n\\n\x3c!-- truncate --\x3e\\n\\n### WSL\\n\\nWSL, or Windows Subsystem for Linux, is a compatibility layer for running Linux binary executables natively on Windows. It allows us to run a GNU/Linux environment directly on Windows without the overhead of a traditional virtual machine or dual-boot setup.\\n\\n#### Enable WSL from `Windows Features`\\nFirst of all, make sure that WSL is enabled, for this go to:\\n`Control Panel > Programs > Turn Windows Features on or off`\\nScrolling down will reveal the option `Windows Subsystem for Linux`. Make sure it is enabled and press OK to confirm (you will be asked to reboot your computer).\\n\\n![Windows Features WSL Enabled](/docs/blog/windows-features-wsl-enabled.jpg)\\n\\n#### Start WSL and Install Ubuntu\\n\\nNow we will spend some time in either `PowerShell` or [Windows Terminal](https://apps.microsoft.com/detail/9n0dx20hk701), which is a modern terminal application that supports various command-line tools and shells.\\n\\n```bash\\n# may be desirable for seamless integration between WSL2 distros of linux and docker with WSL backend \\nwsl --set-default-version 2\\n```\\n\\n```\\nwsl --install --d Ubuntu\\n```\\n\\n**Read more on WSL:**\\nhttps://learn.microsoft.com/en-us/windows/wsl/install\\nhttps://learn.microsoft.com/en-us/windows/wsl/setup/environment\\nhttps://learn.microsoft.com/en-us/windows/wsl/\\n\\n### Install Required Packages\\nOnce the installation is completed you will have Ubuntu installed as any other application on Windows. Open it from the start menu and you will be dropped into the [Ubuntu bash shell](https://ubuntu.com/tutorials/command-line-for-beginners#1-overview)\\n\\nEnter the following commands to install all the packages that Rust and Node might need later:\\n\\n```bash\\napt-get update\\napt-get install gcc make libudev-dev openssl pkg-config unzip -y\\n```\\n\\n:::tip Permission Denied?\\nDepending on your setup, you might need to run the commands with `sudo`. This temporarily grants your user elevated privileges to perform tasks that require higher permissions.\\n:::\\n\\n### Setup Developer Environment\\n\\nNow that we have WSL enabled and running Ubuntu, it is time to setup our developer environment. At NEAR we currently support using JS/TS and Rust to develop smart contracts, and JS/TS to develop web applications.\\n\\nBellow we will explain how to install both `Node.js` and `Rust`. If you want, you can install only one of them (e.g. if you are only planning to create a Rust contract, you don\'t need Node.js). However, we do recommend to install both so your environment is ready if you want to try something different later.\\n\\n#### Node (JS/TS)\\n\\nNode.js is a JavaScript runtime environment that executes code outside a web browser, enabling the development of server-side applications. In NEAR development, it can be used to write smart contracts in [TypeScript](https://www.typescriptlang.org/), as well as to create Web applications that interact with NEAR.\\n\\n```\\n# installs nvm (Node Version Manager)\\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\\n# download and install Node.js\\nnvm install 20\\n# verifies the right Node.js version is in the environment\\nnode -v # should print `v20.14.0`\\n# verifies the right NPM version is in the environment\\nnpm -v # should print `10.7.0`\\n```\\n\\n**Read more:**\\n[NodeJS Website](https://nodejs.org/)\\n\\n#### Rust\\n\\n[Rust](https://www.rust-lang.org/) is a programming language known for its safety and performance. It\'s used in NEAR development to write secure and efficient smart contracts.\\n\\nNext, we need to add the `wasm32-unknown-unknown` toolchain. This toolchain is required because the contracts we build will be compiled to [WASM](https://webassembly.org/) to run on the NEAR blockchain.\\n\\n```bash\\ncurl --proto \'=https\' --tlsv1.2 -sSf https://sh.rustup.rs | sh\\n# When prompted, press enter for default install options\\n. source $HOME/.cargo/env\\nrustup target add wasm32-unknown-unknown\\n```\\n\\n**Read more:**\\n[Getting Started with Rust](https://www.rust-lang.org/learn/get-started)\\n\\n### That\'s It\\n\\nAt this point, we are ready to install the relevant tooling and start building on NEAR. Head over to the [Quickstart](http://docs.near.org/build/smart-contracts/quickstart) section of the docs for more information or jump right into the [examples](https://github.com/near-examples)."},{"id":"yield-resume","metadata":{"permalink":"/docs/zh-CN/blog/yield-resume","source":"@site/../blog/2024-05-30.md","title":"It\'s gonna be Legen... wait for it...","description":"dary! Legendary! NEAR protocol is getting updated with the ability to yield and resume computations","date":"2024-05-30T00:00:00.000Z","tags":[{"inline":true,"label":"protocol","permalink":"/docs/zh-CN/blog/tags/protocol"},{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":4.415,"hasTruncateMarker":true,"authors":[{"name":"Guille","title":"Docs Maintainer","url":"https://github.com/gagdiez","socials":{"x":"https://x.com/guillewrotethis","github":"https://github.com/gagdiez"},"imageURL":"https://github.com/gagdiez.png","key":"gagdiez","page":null}],"frontMatter":{"title":"It\'s gonna be Legen... wait for it...","authors":["gagdiez"],"slug":"yield-resume","tags":["protocol","updates"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Getting Started on NEAR Using Windows","permalink":"/docs/zh-CN/blog/getting-started-on-windows"},"nextItem":{"title":"Use cases for Chain Signatures","permalink":"/docs/zh-CN/blog/chain-signatures-use-cases"}},"content":"*dary! Legendary! NEAR protocol is getting updated with the ability to yield and resume computations*\\n\\n![waiting on a loop](/docs/blog/legendary.jpg)\\n\\n\x3c!-- truncate --\x3e\\n\\n:::tip \ud83c\udf89 September Update \ud83c\udf89\\n\\nWe now have an [example of how to use `yield` and `resume`](https://github.com/near-examples/yield-resume) in your contracts. Check it out!\\n\\nThere is also a new documentation page on [Yield and Resume](/build/smart-contracts/anatomy/yield-resume) that explains how to use this feature\\n\\n:::\\n\\n## The problem of waiting\\nCurrently, smart contracts have no way to wait for an external event to happen. This can be a problem when the contract relies on an external service to provide a result.\\n\\nWe encountered this issue while implementing [Chain Signatures](/concepts/abstraction/chain-signatures), which work by requiring an external service to provide a signature.\\n\\nUntil now, the only workaround has been to make the contract call itself in a loop, checking on each iteration if the result is ready. Each call delays the result by one block (~1 second), allowing the contract to wait almost a minute before running out of gas.\\n\\n![waiting on a loop](/docs/blog/contract-wait-loop.png)\\n*Until now, contracts had to wait by calling themselves until a external service replies... more often than not the contract will run out of gas waiting*\\n\\nWhile this method works, it\'s far from ideal. It wastes a lot of gas on looping and - more often than not - runs out of gas, forcing the user to retry the transaction.\\n\\n## Yield and Resume\\nStarting from version `1.40` of the protocol, developers can **delay the execution** of a function until certain conditions are met (e.g. an external service provides a result).\\n\\nThis way, instead of the contract calling itself on a loop waiting, the contract can simply **yield** calling the function that gives the result. When an external response is provided, the contract will **resume** and return the result.\\n\\n![waiting on a yield](/docs/blog/contract-wait-yield.png)\\n*Contracts can now yield the execution of a function until an external service signals that the result is ready*\\n\\n### What is exactly being yielded?\\nIt is important to notice that the contract is not **halting** or **blocking** its ability to execute, nor **halting in the middle of a function** to later resume it.\\n\\nIn the same way that a function can return a promise to call another contract, now a function can return a **yield** to call another function.\\n\\nIndeed, the contract is not halting, but simply **delaying the execution of a callback** until an external agent signals that it is ok to resume.\\n\\nIf the contract does not trigger a resume after 200 blocks - around 4 minutes - the yielded function will resume receiving a \\"timeout error\\" as input.\\n\\n:::warning State Changes\\nPeople can keep calling functions on the contract between a `yield`/`resume`, and the function that creates the `yield` can be called multiple times.\\n\\nThe state **can change** between the `yield` and the `resume`, since people can keep interacting with the contract.\\n\\nMoreover, since the function used to signal is public, developers must make sure to guard it properly to avoid unwanted calls. This can be done by simply checking the caller of the function.\\n:::\\n\\n### How does it change for the user?\\nBetween the `yield` and `resume` the user will simply be waiting to receive the result. But, in contrast with waiting on a loop, the user will not pay GAS just for having the contract waiting!\\n\\n## How I can use yield/resume in my contract?\\nWhile we have not created any official `yield/resume` example, you can refer to [Saketh Are\'s example](https://github.com/near/near-sdk-rs/pull/1133/files), who has been working on the `yield/resume` implementation.\\n\\nThe basic idea is that the SDK now exposes two functions:\\n- A `yield(function_to_yield)` that returns a `yield_ID` which identifies the yield\\n- A `resume(yield_ID)` that signals which instance of `function_to_yield` can now execute\\n\\n#### Simplified Example\\n\\n```rust\\n// const DATA_ID_REGISTER: u64 = 0;\\n\\npub fn request_weather(&mut self, city: String) {\\n    let index = self.next_available_request_index;\\n    self.next_available_request_index += 1;\\n\\n    let yield_promise = env::promise_yield_create(\\n        \\"callback_return_result\\",\\n        &serde_json::to_vec(&(index,)).unwrap(),\\n        SIGN_ON_FINISH_CALL_GAS,\\n        GasWeight(0),\\n        DATA_ID_REGISTER,\\n    );\\n\\n    // Store the request, so an external service can easily fetch it\\n    // This is optional, as an indexer could simply observe it in the receipts\\n    let data_id: CryptoHash =\\n        env::read_register(DATA_ID_REGISTER).expect(\\"\\").try_into().expect(\\"\\");\\n    self.requests.insert(&index, WeatherRequest{&data_id, &city});\\n\\n    // The return will be the result of \\"callback_return_result\\" (defined below)\\n    env::promise_return(yield_promise);\\n}\\n\\n/// Called by external participants to submit a response\\npub fn respond(&mut self, data_id: String, weather: String) {\\n    let mut data_id_buf = [0u8; 32];\\n    hex::decode_to_slice(data_id, &mut data_id_buf).expect(\\"\\");\\n    let data_id = data_id_buf;\\n\\n    // check that caller is allowed to respond, weather is valid, etc.\\n    // ...\\n\\n    log!(\\"submitting response {} for data id {:?}\\", &weather, &data_id);\\n    env::promise_yield_resume(&data_id, &serde_json::to_vec(&weather).unwrap());\\n}\\n\\n/// Callback receiving the external data (or a PromiseError in case of timeout)\\npub fn callback_return_result(\\n    &mut self,\\n    request_index: u64,\\n    #[callback_result] weather: Result<String, PromiseError>,\\n) -> String {\\n    // Clean up the local state\\n    self.requests.remove(&request_index);\\n\\n    match weather {\\n        Ok(weather) => \\"weather received: \\".to_owned() + &weather,\\n        Err(_) => \\"request timed out\\".to_string(),\\n    }\\n}\\n```\\n\\n## Conclusion\\nThe ability to `yield` and `resume` computations is a big step forward for the NEAR protocol, as it enables developers to create contracts that rely on external services.\\n\\nCurrently, the feature is only **available on testnet**, and we are looking for feedback on how to improve it.\\n\\nWe expect to have a more user-friendly way to use `yield` and `resume` in the future, so stay tuned!"},{"id":"chain-signatures-use-cases","metadata":{"permalink":"/docs/zh-CN/blog/chain-signatures-use-cases","source":"@site/../blog/2024-05-15.md","title":"Use cases for Chain Signatures","description":"Chain signatures enable you to implement multichain and cross-chain workflows in a simple way. Let\'s take a look at a few possible use cases","date":"2024-05-15T00:00:00.000Z","tags":[{"inline":true,"label":"docusaurus","permalink":"/docs/zh-CN/blog/tags/docusaurus"},{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":5.84,"hasTruncateMarker":true,"authors":[{"name":"Damian","title":"Docs Maintainer","url":"https://github.com/bucanero","imageURL":"https://github.com/bucanero.png","key":"bucanero","page":null}],"frontMatter":{"title":"Use cases for Chain Signatures","authors":["bucanero"],"slug":"chain-signatures-use-cases","tags":["docusaurus","updates"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"It\'s gonna be Legen... wait for it...","permalink":"/docs/zh-CN/blog/yield-resume"},"nextItem":{"title":"Reorganizing our docs","permalink":"/docs/zh-CN/blog/reorganizing-docs"}},"content":"*Chain signatures enable you to implement multichain and cross-chain workflows in a simple way. Let\'s take a look at a few possible use cases*\\n\\n\x3c!-- truncate --\x3e\\n\\n\\n## Trade Blockchain assets without transactions\\n\\nTrading assets across different blockchains usually requires using a bridge that supports them, bringing longer settlement times as the trades are not atomic and require confirmation on both blockchains.\\n\\nUsing Chain signatures, you can trade assets across chains simply swapping the ownership of NEAR accounts that control funds on different blockchains. For example, you could trade a NEAR account that controls a Bitcoin account with `X BTC` for another NEAR account that controls an Ethereum account with `Y ETH`.\\n\\nThis way, you can keep native tokens on their native blockchain (e.g., `BTC` on Bitcoin, `ETH` on Ethereum, `ARB` on Arbitrum) and trade them without bridges.\\nAs an added bonus, trades are atomic across chains, settlement takes just 2 seconds, and supports any token on any chain.\\n\\n:::tip Keep in mind\\n\\n There are transactions happening on different blockchains.\\n The difference is that a [Multi-Party Computation service](/concepts/abstraction/chain-signatures#multi-party-computation-service) (MPC) signs a transaction for you, and that transaction is then broadcast to another blockchain RPC node or API.\\n\\n:::\\n\\nFor example, a basic trade flow could be:\\n\\n1. Users create an account controlled by NEAR chain signatures\\n2. Users funds these accounts on the native blockchains (depositing)\\n3. Place orders by funding a new account for the total amount of the order\\n4. Another user accepts the order\\n5. Users swap control of the keys to fulfill the order\\n\\n![docs](/docs/native-cross-chain.png)\\n\\n<details>\\n- User A has `ETH` on the Ethereum blockchain, and wants to buy native Bitcoin\\n- User B wants to sell Bitcoin for Ethereum\\n\\n**Steps**\\n\\n1. User B, using NEAR, creates and funds a new account on Bitcoin with 1 `BTC`\\n2. User B, using the spot marketplace smart contract, signs a transaction to create a limit order. This transfers control of the Bitcoin account to the smart contract\\n3. User A creates a batch transaction with two steps\\n    - Creating and funding a new Ethereum account with 10 `ETH`\\n    - Accepting the order and atomically swapping control of the accounts\\n4. User A takes ownership of the Bitcoin account with 1 `BTC`, and User B takes ownership of the Ethereum account with 10 `ETH`\\n5. User A and B can _\\"withdraw\\"_ their asset from the order by transferring the assets to their respective _\\"main\\"_ accounts\\n</details>\\n\\n---\\n\\n## Oauth-controlled Blockchain accounts\\n\\nOn-boarding is a huge problem for decentralized applications. If you want widespread adoption you can\'t expect people to keep seed phrases safe in order to use an application.\\n\\nAn attractive way of managing Web3 accounts is to use existing Web2 accounts to on-board users. This can be done in the following way:\\n\\n1. Deploy a NEAR contract that allows the bearer of a user\'s [JWT token](https://jwt.io/) to sign a blockchain transaction (Ethereum, Polygon, Avalanche, and others)\\n2. The user validates their identity with a third-party receiving a JWT Token\\n3. The user holding that token can interact with blockchain applications on Ethereum/Polygon/+++ via the NEAR contract for the duration of its validity\\n\\nAny method of controlling a NEAR account can also be used to control a cross-chain account.\\n\\n:::info About JWT tokens\\nJSON Web Tokens are a standard RFC 7519 method for representing claims securely between two parties. They are used in this example to represent the claim that someone is the owner of an Oauth account.\\n:::\\n\\n---\\n\\n## Cross-chain Zero-friction onboarding\\n\\nUsing unique features of the NEAR account model, [Keypom](https://docs.keypom.xyz/) provides zero-friction onboarding and transactions on NEAR. They are generally used for NFT drops, FT drops, and ticketing.\\n\\nA generic Keypom user-flow could be:\\n\\n1. The developer creates a restricted NEAR account\\n2. The account is funded with `NEAR`\\n3. The user receives a key with limited control of the account\\n4. The user uses the funded account to call controlled endpoints on NEAR\\n5. The user returns the remaining funds to the developer and their account is unlocked\\n\\n:::tip\\nThis allows easy onboarding to decentralized apps. The accounts are initially restricted to prevent the user being able to simply withdraw the `NEAR` from the account.\\n:::\\n\\n## DeFi on Bitcoin (and other non-smart contract chains).\\n\\nUsing chain signatures, smart contracts on NEAR can control externally-owned accounts on non-smart contract chains like Bitcoin, Dogecoin, XRP Ledger, Bittensor, Cosmos Hub, etc. This enables developers to use NEAR as a smart contract \u201clayer\u201d for chains that do not support this functionality natively.\\n\\nFor example, a developer can build a decentralized exchange for Bitcoin Ordinals, using a smart contract on NEAR to manage deposits (into Bitcoin addresses controlled by the contract) and to verify and execute swaps when two users agree to trade BTC for an Ordinal or BRC20 token.\\n\\nExample:\\n1. Seller generates a deposit address on Bitcoin that is controlled by the marketplace smart contract on NEAR via chain signatures\\n2. Seller deposits a Bitcoin Ordinal to the deposit address\\n3. The Ordinal is listed for sale with a price and a pre-commitment signature from the seller\\n4. Buyer accepts the order, deposits USDC\\n5. The control of the Bitcoin Ordinal address is given to the buyer, USDC on NEAR is transferred to the seller\\n\\n#### Using Chain Signatures\\n\\nWith Chain Signatures you can do the same but across many chains, for example Polygon:\\n\\n1. The developer creates a restricted NEAR account with a key\\n2. The account is funded with `NEAR` and `MATIC`\\n3. The user receives a key with limited control of the account\\n4. The user uses the funded account to sign payloads calling controlled endpoints on Polygon\\n5. The user returns the remaining funds to the developer and their account is unlocked\\n\\nThis allows developers to pay for users to use arbitrary contracts on arbitrary chains.\\n\\n---\\n\\n## Decentralized Clients\\n\\nA big problem in decentralized applications is that while the smart contracts are tamper-proof, the clients that access them generally are not. This allows practically complete control over any user account provided they are using the frontend assets that you serve. This has security, trust, and regulatory implications.\\n\\nWhen smart contracts can sign payloads you can start using [signed exchanges](https://wicg.github.io/webpackage/draft-yasskin-http-origin-signed-responses.html#name-introduction) (or polyfills) to require HTTP exchanges to be signed by a certain key. If it is not signed with this key the SSL certificate is considered invalid. This means that individual users cannot be served invalid frontends without it being generally observable and non repudiable.\\n\\n---\\n\\n## Communication with private NEAR Shards\\n\\nCompanies like [Calimero](https://www.calimero.network/) offer private NEAR shards. Currently, sending messages to and from these NEAR shards is troublesome. If each shard had the ability to sign their message queues, they could be securely sent from one shard to another. Thus you could communicate bidirectionally with any shard as easily as you can with a contract on your own shard.\\n\\n:::tip\\nThis could also simplify NEAR\'s sharding model, by treating each NEAR shard like one would a private shard.\\n:::"},{"id":"reorganizing-docs","metadata":{"permalink":"/docs/zh-CN/blog/reorganizing-docs","source":"@site/../blog/2024-04-24.md","title":"Reorganizing our docs","description":"We released a mayor reorganization of our repository, so we can improve docs for everyone... including us","date":"2024-04-24T00:00:00.000Z","tags":[{"inline":true,"label":"docusaurus","permalink":"/docs/zh-CN/blog/tags/docusaurus"},{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":3.34,"hasTruncateMarker":true,"authors":[{"name":"Guille","title":"Docs Maintainer","url":"https://github.com/gagdiez","socials":{"x":"https://x.com/guillewrotethis","github":"https://github.com/gagdiez"},"imageURL":"https://github.com/gagdiez.png","key":"gagdiez","page":null}],"frontMatter":{"title":"Reorganizing our docs","authors":["gagdiez"],"slug":"reorganizing-docs","tags":["docusaurus","updates"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Use cases for Chain Signatures","permalink":"/docs/zh-CN/blog/chain-signatures-use-cases"},"nextItem":{"title":"We have a blog now!","permalink":"/docs/zh-CN/blog/we-have-a-blog"}},"content":"*We released a mayor reorganization of our repository, so we can improve docs for everyone... including us*\\n\\n<p><img src=\\"https://img.freepik.com/free-photo/ancient-books-adorn-library-carefully-arranged-with-classics-rare-gems_157027-2332.jpg\\" /></p>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Organic growth\\nOur documentation is the result of multiple people collaborating across the span of four very active years, and it has seen a lot of changes: [2942 commits and counting](https://github.com/near/docs/commits/master/).\\n\\nIn the beginning, our docs only needed to explain how to create [smart contracts](/build/smart-contracts/what-is), and how to [interact with them through a frontend](/build/web3-apps/quickstart). Fast forward to today, and we have more than 200 pages of documentation, covering topics such as [chain abstraction](/build/chain-abstraction/what-is), [on-chain components](/build/near-components/what-is), [data infrastructure](/build/data-infrastructure/what-is), and [primitives such as NFT, FT](/build/primitives/what-is).\\n\\nThe best thing is that new features are released every single month. However, all progress comes at a cost, and as our ecosystem grew, so did the disorganization of our documentation.\\n\\n## What link was that again?\\nLet\'s briefly explain how [docusaurus](https://docusaurus.io/) (the framework we use in our docs) works so you can understand the problem.\\n\\nIn docusaurus, all the pages are written as simple markdown files. These files go inside the `./docs` folder, and can be organized in folders. Each file has a unique ID on its header that identifies it (e.g. `id: what-is`), and this ID, alongside its folder path, is used to generate the URL. \\n\\n> For example, the document [`docs/build/smart-contracts/what-is.md`](https://github.com/near/docs/blob/master/docs/2.build/2.smart-contracts/what-is.md) has the `id: what-is`, so it ends being served in the URL https://docs.near.org/build/smart-contracts/what-is.\\n\\n### The problem\\n\\nAbout a year ago, we noticed that our organic growth had left us with a very inconsistent URL structure. Basically, we had a lot of folders, and the files related to the same topic (e.g. NEAR components) would be all over the place.\\n\\nFor example, you would be in the \\"Build\\" section reading about \\"What is a NEAR Component?\\" and the URL was `/bos/tutorial/quickstart`. The next page was \\"Setup an Environment\\" located at `/bos/dev/intro`, followed by \\"Anatomy of a Component -> State\\" at `/bos/api/state`. Talk about consistency!\\n\\nOf course, we did not do this on purpose, it is just how things evolved. You might even notice that we are now talking about \\"NEAR Components\\" but the URL talks about \\"BOS\\". This is because when we started, \\"BOS\\" (Blockchain Operating System) felt like a good name, but community feedback made us know that, indeed, it was not. \\n\\n### The migration\\n\\nWe [re-organized more than 200 files](https://github.com/near/docs/pull/1890/files) to a new structure that is more consistent. This makes it easier for users to remember the URLs, improves our SEO, and makes it easier for contributors to find where to add new content. No more need to search across multiple folders trying to find the right file!\\n\\nIn the process, we updated all **internal links**, aided by our [link-checker script](https://github.com/near/docs/blob/master/website/test-links.sh) to make sure we left **no broken links**. We also added **URL redirects** in our server, so all users coming from an external site are redirected to the correct URLs.\\n\\nBesides checking broken links, we took the time to make sure all the **translations were correctly migrated**. The system Docusaurus uses (called [Crowdin](https://crowdin.com/)) is not very good at detecting changes in a file, so migrating all the translations was a huge effort in itself. \\n\\nWe could write a blog post just about migrating translations in docusaurus + crowdin... but we will spare you the pain.\\n\\n:::tip Missing URL\\nIf you come across a URL that is not working, please let us know by using the `Feedback` button on the right side of the page, or by opening an [issue in our repository](https://github.com/near/docs/issues)\\n:::\\n\\n## What\'s next\\nNow that most of our documentation is in a better shape, we can focus on improving the content itself. We have a lot of ideas on how to make the docs more interactive, and we are excited to start working on them.\\n\\nStay tuned for more updates, and remember that if you have any feedback or ideas, you can always reach out to us. We are always happy to hear from you!\\n\\nSee you in the next post! \ud83d\ude80"},{"id":"we-have-a-blog","metadata":{"permalink":"/docs/zh-CN/blog/we-have-a-blog","source":"@site/../blog/2024-04-23.md","title":"We have a blog now!","description":"Check check check. Is this thing on? Hello, world!","date":"2024-04-23T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/docs/zh-CN/blog/tags/updates"}],"readingTime":2.105,"hasTruncateMarker":true,"authors":[{"name":"Guille","title":"Docs Maintainer","url":"https://github.com/gagdiez","socials":{"x":"https://x.com/guillewrotethis","github":"https://github.com/gagdiez"},"imageURL":"https://github.com/gagdiez.png","key":"gagdiez","page":null}],"frontMatter":{"title":"We have a blog now!","authors":["gagdiez"],"slug":"we-have-a-blog","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Reorganizing our docs","permalink":"/docs/zh-CN/blog/reorganizing-docs"}},"content":"*Check check check. Is this thing on? Hello, world!*\\n\\n<p><img src=\\"/assets/images/protocol-b73c2a3ace3307226ee7eb2149ee432f.png\\" /></p>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Hello there!\\nWelcome to the new NEAR documentation blog! We\'re excited to inaugurate this new space where we can share news and updates. We know what you are thinking \u2014 why a blog? Well, it allows us to interact with you in a different way!\\n\\nWhen writing documentation, it is important for us to keep the content focused and concise. This way, when you read it, you have nothing to distract you, and you can focus on learning a new concept.\\n\\nThe problem with this is that many times, we want to share ideas, thoughts, or insights into why some things are the way they are. However, this would imply going off on a tangent and explaining why some decisions were made, which will probably add noise to the document. Most of the time, users just want a link to an example or working code. Also, people don\'t like to read long texts.\\n\\nBesides that, sometimes we just want to share what we did during the week. For example, did you notice that we fixed the nightmare that was the URL structure, or that we added new landing pages for all concepts? We want to share these things with you, but they don\'t really belong in the Docs.\\n\\n:::tip\\nYou would not believe the number of times we said during a review _\\"let\'s remove that, we are writing technical documentation, not a blog post\\"_ ... well, now we can make the blog post!\\n:::\\n\\n## What to expect\\n\\nWe will be using this space to share updates about our docs, as well as **complement them** with additional information that we think you\'ll find interesting.\\n\\nOur aim is to keep the blog updated at least once a week, but given the limited amount of time we have, we will see how that goes.\\n\\nMoreover, we want to remind you that our Docs are an open source and **collaborative project**. If you feel like you have something to share, or want to contribute to the blog, feel free to reach out. And by reaching out, we mean [opening a PR](https://github.com/near/docs/pulls)!\\n\\n## A new era for NEAR docs\\n\\nWe are super excited to start this new section and hope it helps us to connect with all of you in a better way. We are looking forward to hearing your thoughts and feedback, and hope you enjoy the content we\'ll be sharing.\\n\\nSee you in the next post! \ud83d\ude80"}]}}')}}]);